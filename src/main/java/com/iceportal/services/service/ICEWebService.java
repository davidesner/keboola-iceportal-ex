package com.iceportal.services.service;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.10
 * 2017-09-18T14:33:56.890+01:00
 * Generated source version: 3.1.10
 * 
 */
@WebServiceClient(name = "ICEWebService", 
                  wsdlLocation = "file:/C:/Users/esner/Documents/Prace/KBC/keboola-ex-iceportal/keboola-iceportal-ex/resources/iceportal.wsdl",
                  targetNamespace = "http://services.iceportal.com/service") 
public class ICEWebService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://services.iceportal.com/service", "ICEWebService");
    public final static QName ICEWebServiceSoap12 = new QName("http://services.iceportal.com/service", "ICEWebServiceSoap12");
    public final static QName ICEWebServiceSoap = new QName("http://services.iceportal.com/service", "ICEWebServiceSoap");
    public final static QName ICEWebServiceHttpGet = new QName("http://services.iceportal.com/service", "ICEWebServiceHttpGet");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Users/esner/Documents/Prace/KBC/keboola-ex-iceportal/keboola-iceportal-ex/resources/iceportal.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(ICEWebService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/C:/Users/esner/Documents/Prace/KBC/keboola-ex-iceportal/keboola-iceportal-ex/resources/iceportal.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public ICEWebService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ICEWebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ICEWebService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public ICEWebService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public ICEWebService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public ICEWebService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns ICEWebServiceSoap
     */
    @WebEndpoint(name = "ICEWebServiceSoap12")
    public ICEWebServiceSoap getICEWebServiceSoap12() {
        return super.getPort(ICEWebServiceSoap12, ICEWebServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ICEWebServiceSoap
     */
    @WebEndpoint(name = "ICEWebServiceSoap12")
    public ICEWebServiceSoap getICEWebServiceSoap12(WebServiceFeature... features) {
        return super.getPort(ICEWebServiceSoap12, ICEWebServiceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns ICEWebServiceSoap
     */
    @WebEndpoint(name = "ICEWebServiceSoap")
    public ICEWebServiceSoap getICEWebServiceSoap() {
        return super.getPort(ICEWebServiceSoap, ICEWebServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ICEWebServiceSoap
     */
    @WebEndpoint(name = "ICEWebServiceSoap")
    public ICEWebServiceSoap getICEWebServiceSoap(WebServiceFeature... features) {
        return super.getPort(ICEWebServiceSoap, ICEWebServiceSoap.class, features);
    }


    /**
     *
     * @return
     *     returns ICEWebServiceHttpGet
     */
    @WebEndpoint(name = "ICEWebServiceHttpGet")
    public ICEWebServiceHttpGet getICEWebServiceHttpGet() {
        return super.getPort(ICEWebServiceHttpGet, ICEWebServiceHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ICEWebServiceHttpGet
     */
    @WebEndpoint(name = "ICEWebServiceHttpGet")
    public ICEWebServiceHttpGet getICEWebServiceHttpGet(WebServiceFeature... features) {
        return super.getPort(ICEWebServiceHttpGet, ICEWebServiceHttpGet.class, features);
    }

}
